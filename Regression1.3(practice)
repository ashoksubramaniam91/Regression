{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import statsmodels.formula.api as smf\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('C:\\\\Users\\\\Ashok\\\\Desktop\\\\Regression\\\\car_sales.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Manufacturer</th>\n",
       "      <th>Model</th>\n",
       "      <th>Type</th>\n",
       "      <th>Min.Price</th>\n",
       "      <th>Price</th>\n",
       "      <th>Max.Price</th>\n",
       "      <th>MPG.city</th>\n",
       "      <th>MPG.highway</th>\n",
       "      <th>AirBags</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>EngineSize</th>\n",
       "      <th>Horsepower</th>\n",
       "      <th>RPM</th>\n",
       "      <th>Rev.per.mile</th>\n",
       "      <th>Man.trans.avail</th>\n",
       "      <th>Fuel.tank.capacity</th>\n",
       "      <th>Passengers</th>\n",
       "      <th>Length</th>\n",
       "      <th>Wheelbase</th>\n",
       "      <th>Width</th>\n",
       "      <th>Turn.circle</th>\n",
       "      <th>Rear.seat.room</th>\n",
       "      <th>Luggage.room</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Make</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Acura</td>\n",
       "      <td>Integra</td>\n",
       "      <td>Small</td>\n",
       "      <td>12.9</td>\n",
       "      <td>15.9</td>\n",
       "      <td>18.8</td>\n",
       "      <td>25</td>\n",
       "      <td>31</td>\n",
       "      <td>None</td>\n",
       "      <td>Front</td>\n",
       "      <td>4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>140</td>\n",
       "      <td>6300</td>\n",
       "      <td>2890</td>\n",
       "      <td>Yes</td>\n",
       "      <td>13.2</td>\n",
       "      <td>5</td>\n",
       "      <td>177</td>\n",
       "      <td>102</td>\n",
       "      <td>68</td>\n",
       "      <td>37</td>\n",
       "      <td>26.5</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2705</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Acura Integra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Acura</td>\n",
       "      <td>Legend</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>29.2</td>\n",
       "      <td>33.9</td>\n",
       "      <td>38.7</td>\n",
       "      <td>18</td>\n",
       "      <td>25</td>\n",
       "      <td>Driver &amp; Passenger</td>\n",
       "      <td>Front</td>\n",
       "      <td>6</td>\n",
       "      <td>3.2</td>\n",
       "      <td>200</td>\n",
       "      <td>5500</td>\n",
       "      <td>2335</td>\n",
       "      <td>Yes</td>\n",
       "      <td>18.0</td>\n",
       "      <td>5</td>\n",
       "      <td>195</td>\n",
       "      <td>115</td>\n",
       "      <td>71</td>\n",
       "      <td>38</td>\n",
       "      <td>30.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3560</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Acura Legend</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Audi</td>\n",
       "      <td>90</td>\n",
       "      <td>Compact</td>\n",
       "      <td>25.9</td>\n",
       "      <td>29.1</td>\n",
       "      <td>32.3</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "      <td>Driver only</td>\n",
       "      <td>Front</td>\n",
       "      <td>6</td>\n",
       "      <td>2.8</td>\n",
       "      <td>172</td>\n",
       "      <td>5500</td>\n",
       "      <td>2280</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.9</td>\n",
       "      <td>5</td>\n",
       "      <td>180</td>\n",
       "      <td>102</td>\n",
       "      <td>67</td>\n",
       "      <td>37</td>\n",
       "      <td>28.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3375</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Audi 90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Audi</td>\n",
       "      <td>100</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>30.8</td>\n",
       "      <td>37.7</td>\n",
       "      <td>44.6</td>\n",
       "      <td>19</td>\n",
       "      <td>26</td>\n",
       "      <td>Driver &amp; Passenger</td>\n",
       "      <td>Front</td>\n",
       "      <td>6</td>\n",
       "      <td>2.8</td>\n",
       "      <td>172</td>\n",
       "      <td>5500</td>\n",
       "      <td>2535</td>\n",
       "      <td>Yes</td>\n",
       "      <td>21.1</td>\n",
       "      <td>6</td>\n",
       "      <td>193</td>\n",
       "      <td>106</td>\n",
       "      <td>70</td>\n",
       "      <td>37</td>\n",
       "      <td>31.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>3405</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Audi 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>BMW</td>\n",
       "      <td>535i</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>23.7</td>\n",
       "      <td>30.0</td>\n",
       "      <td>36.2</td>\n",
       "      <td>22</td>\n",
       "      <td>30</td>\n",
       "      <td>Driver only</td>\n",
       "      <td>Rear</td>\n",
       "      <td>4</td>\n",
       "      <td>3.5</td>\n",
       "      <td>208</td>\n",
       "      <td>5700</td>\n",
       "      <td>2545</td>\n",
       "      <td>Yes</td>\n",
       "      <td>21.1</td>\n",
       "      <td>4</td>\n",
       "      <td>186</td>\n",
       "      <td>109</td>\n",
       "      <td>69</td>\n",
       "      <td>39</td>\n",
       "      <td>27.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3640</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>BMW 535i</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 Manufacturer      ...         Origin           Make\n",
       "0           1        Acura      ...        non-USA  Acura Integra\n",
       "1           2        Acura      ...        non-USA   Acura Legend\n",
       "2           3         Audi      ...        non-USA        Audi 90\n",
       "3           4         Audi      ...        non-USA       Audi 100\n",
       "4           5          BMW      ...        non-USA       BMW 535i\n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Manufacturer</th>\n",
       "      <th>Model</th>\n",
       "      <th>Type</th>\n",
       "      <th>Min.Price</th>\n",
       "      <th>Price</th>\n",
       "      <th>Max.Price</th>\n",
       "      <th>MPG.city</th>\n",
       "      <th>MPG.highway</th>\n",
       "      <th>AirBags</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>EngineSize</th>\n",
       "      <th>Horsepower</th>\n",
       "      <th>RPM</th>\n",
       "      <th>Rev.per.mile</th>\n",
       "      <th>Man.trans.avail</th>\n",
       "      <th>Fuel.tank.capacity</th>\n",
       "      <th>Passengers</th>\n",
       "      <th>Length</th>\n",
       "      <th>Wheelbase</th>\n",
       "      <th>Width</th>\n",
       "      <th>Turn.circle</th>\n",
       "      <th>Rear.seat.room</th>\n",
       "      <th>Luggage.room</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Make</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>89</td>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>Eurovan</td>\n",
       "      <td>Van</td>\n",
       "      <td>16.6</td>\n",
       "      <td>19.7</td>\n",
       "      <td>22.7</td>\n",
       "      <td>17</td>\n",
       "      <td>21</td>\n",
       "      <td>None</td>\n",
       "      <td>Front</td>\n",
       "      <td>5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>109</td>\n",
       "      <td>4500</td>\n",
       "      <td>2915</td>\n",
       "      <td>Yes</td>\n",
       "      <td>21.1</td>\n",
       "      <td>7</td>\n",
       "      <td>187</td>\n",
       "      <td>115</td>\n",
       "      <td>72</td>\n",
       "      <td>38</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3960</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Volkswagen Eurovan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>90</td>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>Passat</td>\n",
       "      <td>Compact</td>\n",
       "      <td>17.6</td>\n",
       "      <td>20.0</td>\n",
       "      <td>22.4</td>\n",
       "      <td>21</td>\n",
       "      <td>30</td>\n",
       "      <td>None</td>\n",
       "      <td>Front</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>134</td>\n",
       "      <td>5800</td>\n",
       "      <td>2685</td>\n",
       "      <td>Yes</td>\n",
       "      <td>18.5</td>\n",
       "      <td>5</td>\n",
       "      <td>180</td>\n",
       "      <td>103</td>\n",
       "      <td>67</td>\n",
       "      <td>35</td>\n",
       "      <td>31.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2985</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Volkswagen Passat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>91</td>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>Corrado</td>\n",
       "      <td>Sporty</td>\n",
       "      <td>22.9</td>\n",
       "      <td>23.3</td>\n",
       "      <td>23.7</td>\n",
       "      <td>18</td>\n",
       "      <td>25</td>\n",
       "      <td>None</td>\n",
       "      <td>Front</td>\n",
       "      <td>6</td>\n",
       "      <td>2.8</td>\n",
       "      <td>178</td>\n",
       "      <td>5800</td>\n",
       "      <td>2385</td>\n",
       "      <td>Yes</td>\n",
       "      <td>18.5</td>\n",
       "      <td>4</td>\n",
       "      <td>159</td>\n",
       "      <td>97</td>\n",
       "      <td>66</td>\n",
       "      <td>36</td>\n",
       "      <td>26.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2810</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Volkswagen Corrado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>92</td>\n",
       "      <td>Volvo</td>\n",
       "      <td>240</td>\n",
       "      <td>Compact</td>\n",
       "      <td>21.8</td>\n",
       "      <td>22.7</td>\n",
       "      <td>23.5</td>\n",
       "      <td>21</td>\n",
       "      <td>28</td>\n",
       "      <td>Driver only</td>\n",
       "      <td>Rear</td>\n",
       "      <td>4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>114</td>\n",
       "      <td>5400</td>\n",
       "      <td>2215</td>\n",
       "      <td>Yes</td>\n",
       "      <td>15.8</td>\n",
       "      <td>5</td>\n",
       "      <td>190</td>\n",
       "      <td>104</td>\n",
       "      <td>67</td>\n",
       "      <td>37</td>\n",
       "      <td>29.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2985</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Volvo 240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>93</td>\n",
       "      <td>Volvo</td>\n",
       "      <td>850</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>24.8</td>\n",
       "      <td>26.7</td>\n",
       "      <td>28.5</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>Driver &amp; Passenger</td>\n",
       "      <td>Front</td>\n",
       "      <td>5</td>\n",
       "      <td>2.4</td>\n",
       "      <td>168</td>\n",
       "      <td>6200</td>\n",
       "      <td>2310</td>\n",
       "      <td>Yes</td>\n",
       "      <td>19.3</td>\n",
       "      <td>5</td>\n",
       "      <td>184</td>\n",
       "      <td>105</td>\n",
       "      <td>69</td>\n",
       "      <td>38</td>\n",
       "      <td>30.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3245</td>\n",
       "      <td>non-USA</td>\n",
       "      <td>Volvo 850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0 Manufacturer         ...           Origin                Make\n",
       "88          89   Volkswagen         ...          non-USA  Volkswagen Eurovan\n",
       "89          90   Volkswagen         ...          non-USA   Volkswagen Passat\n",
       "90          91   Volkswagen         ...          non-USA  Volkswagen Corrado\n",
       "91          92        Volvo         ...          non-USA           Volvo 240\n",
       "92          93        Volvo         ...          non-USA           Volvo 850\n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df[['Horsepower']]\n",
    "Y=df['Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xtrain,Xtest,Ytrain,Ytest=train_test_split(X,Y,test_size=0.3,random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "Model=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Model.fit(Xtrain,Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_predict=Model.predict(Xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[19.00671752 11.09993513 22.96010872 11.26465976 23.12483335 19.00671752\n",
      " 24.27790578 19.33616679 17.35947119 22.30121018 12.41773219 17.35947119\n",
      " 14.06497853 14.06497853 19.00671752 20.15978995 24.27790578 45.36265882\n",
      " 11.09993513 22.30121018 14.06497853  9.9468627   6.32292077 31.19634037\n",
      " 14.06497853 23.94845651 37.95005033 23.61900725]\n"
     ]
    }
   ],
   "source": [
    "print(Y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Horsepower\n",
      "36         140\n",
      "28          92\n",
      "54         164\n",
      "23          93\n",
      "16         165\n",
      "77         140\n",
      "2          172\n",
      "25         142\n",
      "81         130\n",
      "13         160\n",
      "59         100\n",
      "85         130\n",
      "73         110\n",
      "14         110\n",
      "0          140\n",
      "21         147\n",
      "3          172\n",
      "27         300\n",
      "71          92\n",
      "66         160\n",
      "11         110\n",
      "78          85\n",
      "30          63\n",
      "29         214\n",
      "5          110\n",
      "70         170\n",
      "56         255\n",
      "92         168\n"
     ]
    }
   ],
   "source": [
    "print(Xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.3934994473810205"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE=np.sqrt(np.mean((Ytest-Y_predict)**2))\n",
    "RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2119312379277387"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rsquare=Model.score(Xtest,Ytest)\n",
    "Rsquare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-4.054731120257699"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.16472463])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "##############OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0xc7a32b0>]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X,Y,'*')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "('Horsepower', 'Price')",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3077\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3078\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3079\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: ('Horsepower', 'Price')",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-92-670c66d2335d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Horsepower'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Price'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2686\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2687\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2688\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_column\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2689\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2690\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_getitem_column\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m_getitem_column\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2693\u001b[0m         \u001b[1;31m# get column\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2694\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mis_unique\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2695\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_item_cache\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2696\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2697\u001b[0m         \u001b[1;31m# duplicate columns & possible reduce dimensionality\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_get_item_cache\u001b[1;34m(self, item)\u001b[0m\n\u001b[0;32m   2487\u001b[0m         \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcache\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2488\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mres\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2489\u001b[1;33m             \u001b[0mvalues\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2490\u001b[0m             \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_box_item_values\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2491\u001b[0m             \u001b[0mcache\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mres\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals.py\u001b[0m in \u001b[0;36mget\u001b[1;34m(self, item, fastpath)\u001b[0m\n\u001b[0;32m   4113\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4114\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4115\u001b[1;33m                 \u001b[0mloc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4116\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4117\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0misna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3078\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3079\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3080\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3081\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3082\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: ('Horsepower', 'Price')"
     ]
    }
   ],
   "source": [
    "\n",
    "df['Horsepower','Price'].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model1=smf.ols('Y~X',df).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept   -1.398769\n",
       "X            0.145371\n",
       "dtype: float64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6212869500338225"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict=model1.predict(X)\n",
    "model1.rsquared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.912335277054934"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rmse\n",
    "rmse=np.sqrt(np.mean((df['Price']-y_predict)**2))\n",
    "rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     18.953203\n",
       "1     27.675476\n",
       "2     23.605082\n",
       "3     23.605082\n",
       "4     28.838446\n",
       "5     14.592066\n",
       "6     23.314339\n",
       "7     24.768052\n",
       "8     23.314339\n",
       "9     27.675476\n",
       "10    41.485743\n",
       "11    14.592066\n",
       "12    14.592066\n",
       "13    21.860627\n",
       "14    14.592066\n",
       "15    23.314339\n",
       "16    22.587483\n",
       "17    23.314339\n",
       "18    42.212599\n",
       "19    20.843029\n",
       "20    19.098574\n",
       "21    19.970801\n",
       "22    11.975384\n",
       "23    12.120755\n",
       "24    13.138354\n",
       "25    19.243945\n",
       "26    13.138354\n",
       "27    42.212599\n",
       "28    11.975384\n",
       "29    29.710673\n",
       "        ...    \n",
       "63    14.592066\n",
       "64    20.406915\n",
       "65    20.552286\n",
       "66    21.860627\n",
       "67    21.133771\n",
       "68    14.592066\n",
       "69    23.314339\n",
       "70    23.314339\n",
       "71    11.975384\n",
       "72     9.358702\n",
       "73    14.592066\n",
       "74    21.860627\n",
       "75    27.675476\n",
       "76    23.314339\n",
       "77    18.953203\n",
       "78    10.957785\n",
       "79     9.213330\n",
       "80    11.684641\n",
       "81    17.499490\n",
       "82     8.777217\n",
       "83    10.521671\n",
       "84    18.226346\n",
       "85    17.499490\n",
       "86    18.662460\n",
       "87    10.376300\n",
       "88    14.446695\n",
       "89    18.080975\n",
       "90    24.477309\n",
       "91    15.173551\n",
       "92    23.023597\n",
       "Length: 93, dtype: float64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
